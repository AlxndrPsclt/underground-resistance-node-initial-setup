---
#:TODO: When the time comes, split this file in different roles
#:TODO: Create dynamic inventory using nmap to find RPIs on the network (using their mac adresses), and a redis/consul/etcd shared truth
- hosts: rpis
  #gather_facts: false

  tasks:
#   - name: Test that my custom module works
#     github_repo: 
#     register: result

#   - debug: var=result

##################
#Users and groups#
##################
#    #TODO: Change the way of iterating to name variable something explicit like username instead of item.key
#    - name: Ensure groups ansible and docker exist
#      become: yes
#      group:
#        name: "{{ item }}"
#        state: present
#      with_items:
#        - ansible
#        - docker
#  
#    - name: Load passwords from a file
#      #Passwords must be stored in the file located in vars/users/user_passwords.yml. This file contains entries for each account to create, associated to passwords hashed with sha512
#      #TODO: Encrypt the passwords with the ansible function deisgned for this purpose. They should not show in the sell during ansible run
#      include_vars:
#        file: users/user_passwords.yml
#        name: user_passwords
#
#    - name: Create users
#      become: yes
#      user:
#        name: "{{item.key}}"
#        password: "{{item.value}}"
#        skeleton: "/etc/skel"
#        shell: /bin/bash
#        groups: ansible, docker, sudo   # Empty by default.
#      with_dict: "{{ user_passwords }}"
#
#    - name: Generate folders for keys on control machine
#      local_action: file
#      run_once: true
#      args:
#        path: "vars/users/user_keys/{{item.key}}"
#        state: directory
#      with_dict: "{{ user_passwords }}"
#
#    - name: Generate keys on host, unless they already exist
#      #TODO: Add a job that removes the keys at random moments, just to refresh and keep access secure
#      local_action: command ssh-keygen -b 2048 -N '' -f vars/users/user_keys/{{item.key}}/id_rsa
#      run_once: true
#      args:
#        creates: "vars/users/user_keys/{{item.key}}/id_rsa"
#      with_dict: "{{ user_passwords }}"
#      register: generated_keys
#
##   - debug: var=generated_keys
#
#    - name: Set authorized key, removing all the authorized keys already set
#      authorized_key:
#        user: "{{item.key}}"
#        key: "{{ lookup('file', 'vars/users/user_keys/{{item.key}}/id_rsa.pub') }}"
#        state: present
#        exclusive: True
#      become: yes
#      with_dict: "{{ user_passwords }}"
#
#    #TODO: Ensure keys get properly switched when new ones are generated
#    - name: Ensure public keys are present
#      copy: 
#        src: 'vars/users/user_keys/{{item.key}}/id_rsa.pub'
#        dest: "/home/{{item.key}}/.ssh/id_rsa.pub"
#        owner: "{{ item.key }}"
#        group: "{{ item.key }}"
#        mode: 0600
#      become: yes
#      with_dict: "{{ user_passwords }}"
#
#    - name: Ensure private keys are present
#      copy: 
#        src: 'vars/users/user_keys/{{item.key}}/id_rsa'
#        dest: "/home/{{item.key}}/.ssh/id_rsa"
#        owner: "{{ item.key }}"
#        group: "{{ item.key }}"
#        mode: 0600
#      become: yes
#      with_dict: "{{ user_passwords }}"


#TODO: Add abitility to run an ansible role, or playbook per user for personalisation
#TODO: Exchange user ssh keys for transparent interhost ssh connexions: the connexions between hosts are still not ssh
#TODO: Update .ssh/config for each user to make ssh easy   (=> think a little bit about hostname changes etc... so that the .ssh/config vars stay uptodate.
#TODO: Add an administrative neutral account for bash tasks, general maintenance (juste change the pi account password??)
#TODO: Change inventory to yml

#######################
#Set hostnames and IPs#
#######################

    - name: Updates nodes name in hosts file:
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.0\.1'
        line: '127.0.0.1 {{ node_hostname }}'
        owner: root
        group: root
        mode: 0644
      become: yes

    - name: Updates nodes name in hostname file:
      lineinfile:
        path: /etc/hostname
        regexp: '^.*'
        line: '{{ node_hostname }}'
        owner: root
        group: root
        mode: 0644
      become: yes

    - name: Changes the hostname (without needing to restart)
      hostname:
        name: {{ node_hostname }}

    - meta: end_play    #Usefull for dev: ends the play right here

#####################
#Installing software#
#####################
#    - name: Update repositories cache and install usefull packages
#      become: yes
#      apt:
#        name: "{{ item }}"
#        update_cache: yes
#        cache_valid_time: 3600
#      with_items:
#        - git
#        - vim-nox
#        - curl
#        - python-pip
#        - virtualenv
##        - python3-pip
#
#    - name: Remove dependencies that are no longer required
#      become: yes
#      apt:
#        autoremove: yes
#
##TODO: Make docker install idempotent again
#    - name: Run docker installation convenience script
#      script: ./files/install_docker.sh
#      register: docker_script_result
#
#    - debug:
#        var: docker_script_result
#
#    - name: Install docker-compose using pip
#      become: yes
#      pip:
#        name: docker-compose
#
##TODO: Install Bonjour, Avahi or Zeroconf
#
#
#################################
##Creating directories structure#
#################################
#    - name: ansible create multiple directory example
#      become: yes
#      file:
#        path: "{{ item.dest }}"
#        group: "{{ item.group }}"
#        mode: "{{ item.mode }}"
#        state: directory
#      with_items:
#        - { dest: '/docker', group: 'root', mode: '0755' }
#        - { dest: '/docker/src', group: 'docker', mode: '0775' }
#        - { dest: '/docker/volumes', group: 'docker', mode: '0775' }
#        - { dest: '/docker/configs', group: 'docker', mode: '0775' }
#        - { dest: '/ansible', group: 'ansible', mode: '0775' }
#
##TODO: Clone dockerfiles and Docker-composes
##TODO: Create the volumes needed for the different services (should use a different role!!)


############################
#Syncronise time on servers#
############################


######################################
#Install and config glusterfs volumes#
######################################

####################
#Overclock the RPIs#
####################

####################
#Init or join swarm#
####################

####################################
#Launch appropriate docker services#   #TODO: Think a little bit if this is really the appropriate place for this
####################################



#    If needed:
#    - debug:
#        var: user_passwords
