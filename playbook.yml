---
#TODO: When the time comes, split this file in different roles
#TODO: Create dynamic inventory using nmap to find RPIs on the network (using their mac adresses), and a redis/consul/etcd shared truth
- hosts: cleanrpi
  gather_facts: no

  tasks:
    - name: Wait 120 seconds for target connection to become reachable/usable
      wait_for_connection:
    - setup:

##################
#Users and groups#
##################
    - name: Ensure groups ansible and docker exist
      become: yes
      group:
        name: "{{ item }}"
        state: present
      with_items:
        - ansible
        - docker

    - name: Load passwords from a file
      #Passwords must be stored in the file located in vars/users/user_passwords.yml. This file contains entries for each account to create, associated to passwords hashed with sha512
      include_vars:
        file: users/user_passwords.yml
        name: user_passwords

    - name: Create users
      become: yes
      user:
        name: "{{item.key}}"
        password: "{{item.value}}"
        skeleton: "/etc/skel"
        shell: /bin/bash
        groups: ansible, docker, sudo   # Empty by default.
      with_dict: "{{ user_passwords }}"

      #    - name: Create ssh directory
      #      file:
      #        path: "{{ HOME }}/.ssh"
      #        owner: "alex"
      #        group: "alex"
      #        mode: "0755"
      #        state: directory
      #      become: yes
          #- { dest: '/ansible', group: 'ansible', mode: '0775' }
          #
    - name: Set authorized key, removing all the authorized keys already set
      authorized_key:
        user: "{{item.key}}"
        key: "{{ lookup('file', '{{ HOME }}/.ssh/id_ecdsa.pub') }}"
        state: present
        exclusive: True
      become: yes
      with_dict: "{{ user_passwords }}"

#######################
#Set hostnames and IPs#
#######################
    - name: Changes the hostname (without needing to restart)
      become: yes
      hostname:
        name: '{{ DESTINATION_NAME }}'

    - name: Updates nodes name in hosts file
      become: yes
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.1\.1'
        line: '127.0.1.1 {{ DESTINATION_NAME }}'
        owner: root
        group: root
        mode: 0644

    - name: Updates nodes name in hostname file
      become: yes
      lineinfile:
        path: /etc/hostname
        regexp: '^.*'
        line: '{{ DESTINATION_NAME }}'
        owner: root
        group: root
        mode: 0644


    - name: Reboot node and stop polling.
      shell: reboot
      become: yes
      async: 10 # Do not care for 10 sec
      poll: 0 # Fire & Forget

- hosts: cluster
  gather_facts: no

  tasks:
    - name: Wait 120 seconds for target connection to become reachable/usable
      wait_for_connection:
    - setup:



    - name: Update repositories cache and install usefull packages
      become: yes
      apt:
        name: ['git', 'vim-nox', 'curl', 'python-pip', 'git-crypt', 'gpg']
        update_cache: yes
        cache_valid_time: 3600


  #        - python3-pip
      #    - name: Generate folders for keys on control machine
      #      local_action: file
      #      run_once: true
      #      args:
      #        path: "vars/users/user_keys/{{item.key}}"
      #        state: directory
      #      with_dict: "{{ user_passwords }}"
      #
    - name: Copy gpg key from local to host, needed to decrypt pass files and ssh key
      copy:
        src: /home/alex/.gnupg/private-keys-v1.d/591C92020CF74624D921173BA6B96F0B0A5E5D99.key
        dest: /home/alex/.gnupg/private-keys-v1.d/
        owner: alex
        group: alex
        mode: '0600'

    - meta: end_play    #Usefull for dev: ends the play right here

    #TODO: Ensure keys get properly switched when new ones are generated
    - name: Ensure public keys are present
      copy:
        src: '{{ HOME }}/.ssh/id_ecdsa.pub'
        dest: "/home/{{item.key}}/.ssh/id_ecdsa.pub"
        owner: "{{ item.key }}"
        group: "{{ item.key }}"
        mode: 0600
      become: yes
      with_dict: "{{ user_passwords }}"

    - name: Ensure private keys are present
      copy:
        src: 'vars/users/user_keys/{{item.key}}/id_ecdsa'
        dest: "/home/{{item.key}}/.ssh/id_ecdsa"
        owner: "{{ item.key }}"
        group: "{{ item.key }}"
        mode: 0600
      become: yes
      with_dict: "{{ user_passwords }}"


#TODO: Add abitility to run an ansible role, or playbook per user for personalisation
#TODO: Exchange user ssh keys for transparent interhost ssh connexions: the connexions between hosts are still not ssh
#TODO: Update .ssh/config for each user to make ssh easy   (=> think a little bit about hostname changes etc... so that the .ssh/config vars stay uptodate.

    - name: Restart service avahi-daemon, to take hostname change into account
      become: yes
      service:
        name: avahi-daemon
        state: restarted


#####################
#Installing software#
#####################
    - name: Update repositories cache and install usefull packages
      become: yes
      apt:
        name: ['git', 'vim-nox', 'curl', 'python-pip']
        update_cache: yes
        cache_valid_time: 3600
  #        - python3-pip

    - name: Install virtualenv & cie using pip
      become: yes
      pip:
        name: ['virtualenv', 'virtualenvwrapper']

    - name: Remove dependencies that are no longer required
      become: yes
      apt:
        autoremove: yes

#TODO: Make docker install idempotent again
    # - name: Run docker installation convenience script
    #   script: ./files/install_docker.sh
    #   register: docker_script_result

    # - debug:
    #     var: docker_script_result

    # - name: Install docker-compose using pip
    #   become: yes
    #   pip:
    #     name: docker-compose


#################################
##Creating directories structure#
#################################
    - name: Create multiple directory example
      become: yes
      file:
        path: "{{ item.dest }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        state: directory
      with_items:
        - { dest: '/docker', group: 'root', mode: '0755' }
        - { dest: '/docker/src', group: 'docker', mode: '0775' }
        - { dest: '/docker/volumes', group: 'docker', mode: '0775' }
        - { dest: '/docker/configs', group: 'docker', mode: '0775' }
          #- { dest: '/ansible', group: 'ansible', mode: '0775' }

    ##TODO: Clone dockerfiles and Docker-composes: complete template
    # - name: Clone docker projects to run cluster services
    #   git:
    #     repo: ssh://git@github.com/mylogin/hello.git
    #     dest: /docker

##TODO: Create the volumes needed for the different services (should use a different role!!)


############################
#Syncronise time on servers#
############################
    # - name: Set timezone to Europe/Paris
    #   timezone:
    #     name: Europe/Paris

    - name: Creates a link to update timezone
      become: yes
      file:
        src: /usr/share/zoneinfo/Europe/Paris
        dest: /etc/localtime
        state: link

    - name: Restart service cron, to take hostname change into account
      become: yes
      service:
        name: cron
        state: restarted

    - meta: end_play    #Usefull for dev: ends the play right here

################################
#Install and config pcs cluster# TODO: mtache
################################


######################################
#Install and config glusterfs volumes# TODO: mtache
######################################

####################
#Overclock the RPIs#
####################
#    - name: Copy a config.txt file that allows for overclocking
#      become: yes
#      copy:
#        src: ./files/config.txt
#        dest: /boot/config.txt

####################
#Init or join swarm# TODO: mtache
####################

####################################
#Launch appropriate docker services#   #TODO: Think a little bit if this is really the appropriate place for this
####################################

###################################
#Changes pi passwords for security#   #TODO: Think a little bit if this is really the appropriate place for this
####################################

    - name: Load pi password from a file
      #Passwords must be stored in the file located in vars/users/user_passwords.yml. This file contains entries for each account to create, associated to passwords hashed with sha512
      include_vars:
        file: users/pi_password.yml
        name: pi_password

    - name: Change pi password
      become: yes
      user:
        name: pi
        password: "{{item.value}}"
      with_dict: "{{ pi_password }}"

#    If needed:
#    - debug:
#        var: user_passwords
